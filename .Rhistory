})
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 750)
mapview(buffer)
r = raster("B:/ibb/results/clean/NDVI_2003001.tif")
r
r = raster::raster("B:/ibb/results/clean/NDVI_2003001.tif")
r
fields$area = gArea(fields,byid = TRUE, width = 0.001475257*3)#width is 3 times pixel resolution
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*3)#width is 3 times pixel resolution)
mapview(buffer)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*6)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*5)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
touch = gIntersects(buffer)
touch = gIntersects(buffer, byid = TRUE)
touch
?gIntersects
notouch = gDisjoint(buffer, byid = TRUE)
notouch
rm(touch)
unique(touch)
unique(notouch)
summary(notouvh)
summary(notouch)
dim(notouch)
notuch[1,1]
notouch[1,1]
index = apply(notouch,1,function(x){
return(sum(x))
})
index
index = as.vector(unlist(index))
index
unique(index)
index = apply(notouch,1,function(x){
return(sum(x))
})
sum(notouch[1,])
sum(notouch[,1])
notouch[1,]
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
which(index==2047)
plot(randomPoints[c(33,34)])
plot(randomPoints[c(33,34),])
mapview(randomPoints[c(33,34),])
mapview(randomPoints[c(62,71),])
randomPoints
which(index==2047)
which(index==2047)[seq(1,which(index==2047),2)]
which(index==2047)[seq(1,length(which(index==2047)),2)]
randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
randomPoints = randomPoints[-which(index==2047)[seq(1,length(which(index==2047)),2)],]
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
notouch = gDisjoint(buffer, byid = TRUE)
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
unique(index)
gDisjoint()
?gDisjoint()
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
notouch = gDisjoint(buffer, byid = TRUE)
index = apply(notouch,1,function(x){
return(sum(x))
})
index = as.vector(unlist(index))
index = which(index==2047
index
index = which(index==2047)
index
notouch[index,]
which(!notouch)
which(notouch)
which(!notouch)
dim(which(!notouch))
index = apply(notouch,1,function(x){
return(which(x == FALSE))
})
index
index = as.vector(unlist(index))
index
randomPoints
index = apply(notouch,1,function(x){
if (sum(x)==0)return(0)
if (sum(x)>0)return(which(x)==FALSE)
})
index
notouch = gIntersect(buffer, byid = TRUE)
touch = gIntersects(buffer, byid = TRUE)
sum(touch[1,])
sum(touch[2,])
sum(touch[3,])
as.vector(touch[3,])
as.vector(touch[1,])
sum(touch[2,])
sum(touch[4,])
sum(touch[5,])
sum(touch[500,])
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x)==TRUE)
})
index
index = as.vector(unlist(index))
index
which(index!=0)
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x==TRUE))
})
index = as.vector(unlist(index))
which(index!=0)
index
?spsample
df$pixels = round(2500 * df$perc)
set.seed(123920)
randomPoints = lapply(provNames, function(x){
if(length(fields[which(fields$province==x),])==0) return(NULL)
tmp = spsample(fields[which(fields$province==x),],n=df$pixels[df$prov==x],"stratified")
return(tmp)
})
compact = function(x) Filter(Negate(is.null),x)
randomPoints = compact(randomPoints)
tmp = randomPoints[[1]]
for(i in 2:length(randomPoints)){
tmp = spRbind(tmp,randomPoints[[i]])
}
randomPoints = SpatialPointsDataFrame(tmp, data.frame(id=1:length(tmp)))
buffer = gBuffer(randomPoints,byid = TRUE, width = 0.001475257*4.5)#width is 3 times pixel resolution)
touch = gIntersects(buffer, byid = TRUE)
index = apply(touch,1,function(x){
if (sum(x)==1)return(0)
if (sum(x)>1)return(which(x==TRUE))
})
index = as.vector(unlist(index))
index
index = which(index!=0)
index
randomPoints = randomPoints[-index,]
randomPoints
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
randomPoints = SpatialPointsDataFrame(randomPoints, data.frame(id=1:length(tmp)))
randomPoints = SpatialPointsDataFrame(randomPoints, data.frame(id=1:length(randomPoints)))
randomPoints
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(tmp, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(random, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
writeOGR(randomPoints, dsn = "B:/ibb/results/shapes/random_points.shp",layer = "random_points",overwrite_layer = TRUE, driver ="ESRI Shapefile")
df
write.csv(df,"B:/ibb/results/randomSample.csv")
writeOGR(buffer, dsn = "B:/ibb/results/shapes/buffer.shp",layer = "buffer",overwrite_layer = TRUE, driver ="ESRI Shapefile")
install.packages("rater")
install.packages("raster")
library(raster)
first2016 = brick("B:/ibb/results/savG/savG_First2_2016.tif")
second2016 = brick("B:/ibb/results/savG/savG_Second2_2016.tif")
?merge
library(raster)
second2016 = brick("B:/ibb/results/savG/savG_Second2_2016.tif")
first2016 = brick("B:/ibb/results/savG/savG_First2_2016.tif")
?merge
t = merge(first2016,second2016)
t = mosaic(first2016,second2016)
second2016 = brick("B:/ibb/results/savG/savG_2003.tif")
library(raster)
second2016 = brick("B:/ibb/results/savG/savG_2003.tif")
second2016
plot(second2016[1],type = "l")
plot(as.numeric(second2016[1]),type = "l")
list.files("B:/aerosol/studie2/results/",pattern="radius",full.names = T)
list.files("B:/aerosol/studie2/results/",pattern="effe",full.names = T)
list.files("B:/aerosol/studie2/results/",pattern="Effe",full.names = T)
radius = list.files("B:/aerosol/studie2/results/",pattern="Effe",full.names = T)
radius = lapply(radius,raster)
library(raster)
radius = lapply(radius,raster)
mradius = lapply(radius,mean)
mradius
mradius = lapply(radius,function(x){mean(values(x))})
radius = list.files("B:/aerosol/studie2/results/",pattern="Thick",full.names = T)
radius = list.files("B:/aerosol/studie2/results/",pattern="Effe",full.names = T)
radius = lapply(radius,raster)
thick = list.files("B:/aerosol/studie2/results/",pattern="Thick",full.names = T)
thick = lapply(thick,raster)
mthick = lapply(thick,function(x){mean(values(x))})
mradius
mthick
mradius = lapply(radius,function(x){mean(values(x),na.rm=T)})
mthick = lapply(thick,function(x){mean(values(x),na.rm=T)})
mradius
mthick
radius = list.files("B:/aerosol/studie2/results/",pattern="Effe",full.names = T)
radius
thick = list.files("B:/aerosol/studie2/results/",pattern="Thick",full.names = T)
thick
lapply(radius,function(x){max(values(x),na.rm=T)})
radius = list.files("B:/aerosol/studie2/results/",pattern="Effe",full.names = T)
radius = lapply(radius,raster)
lapply(radius,function(x){max(values(x),na.rm=T)})
mradius
mthick
list.files("B:/aerosol/studie2/results/",pattern="Effe",full.names = T)
list.files("B:/aerosol/studie2/results/",pattern="Thick",full.names = T)
library(gdalUtils)
radius = list.files("B:/aerosol/studie2/results/",pattern="Effe",full.names = T)
radius = lapply(radius,raster)
lapply(radius,function(x){summary(values(x),na.rm=T)})
library(keras)
library(magrittr)
patchSize = 5
patchChannels = 140
?layer_conv_2d
23 +23
32+32
32+32+32
32+32+32+32
model = %>%
layer_conv_2d(128,(3,3),activation="relu",input_shape=(patchSize,patchSize,patchChannels)) %>%
layer_conv_2d(128,(3,3), activation="relu") %>%
layer_max_pooling_2d(96,(3,3),activation="relu") %>%
layer_conv_2d(96,(3,3),activation="relu") %>%
layer_conv_2d(96,(3,3),activation="relu") %>%
layer_max_pooling_2d(64,(3,3),activation="relu") %>%
layer_conv_2d(64,(3,3),activation="relu") %>%
layer_conv_2d(64,(3,3),activation="relu") %>%
layer_max_pooling_2d(32,(3,3),activation="relu") %>%
layer_conv_2d(32,(3,3),activation="relu") %>%
layer_conv_2d(32,(3,3),activation="relu") %>%
layer_conv_2d(32,(3,3),activation="relu") %>%
layer_max_pooling_2d(16,(3,3),activation="relu") %>%
layer_conv_2d(16,(3,3),activation="relu") %>%
layer_conv_2d(16,(3,3),activation="relu") %>%
layer_conv_2d(16,(3,3),activation="relu") %>%
model = %>%
layer_conv_2d(128,3,3,activation="relu",input_shape=(patchSize,patchSize,patchChannels)) %>%
layer_conv_2d(128,3,3, activation="relu") #%>%
model = %>%
layer_conv_2d(128,3,3,activation="relu",input_shape=(patchSize,patchSize,patchChannels)) %>%
layer_conv_2d(128,3,3, activation="relu")
model = %>%
layer_conv_2d(128,3,activation="relu",input_shape=(patchSize,patchSize,patchChannels)) %>%
layer_conv_2d(128,3, activation="relu")
model = %>%
layer_conv_2d(filters=128,kernel_size=3,activation="relu",input_shape=(patchSize,patchSize,patchChannels)) %>%
layer_conv_2d(filters=128,kernel_size=3, activation="relu")
model
model = %>%
layer_conv_2d(filters=128,kernel_size=3,activation="relu",input_shape=c(patchSize,patchSize,patchChannels)) %>%
layer_conv_2d(filters=128,kernel_size=3, activation="relu")
model = %>%
layer_conv_2d(filters=128,kernel_size=3,activation="relu",input_shape=c(patchSize,patchSize,patchChannels))
library(magrittr)
library(dplyr)
model = %>%
layer_conv_2d(filters=128,kernel_size=3,activation="relu",input_shape=c(patchSize,patchSize,patchChannels)) %>%
layer_conv_2d(filters=128,kernel_size=3, activation="relu")
model = %>%
layer_conv_2d(filters=128,kernel_size=3,activation="relu",input_shape=c(patchSize,patchSize,patchChannels))
model  %>%
layer_conv_2d(filters=128,kernel_size=3,activation="relu",input_shape=c(patchSize,patchSize,patchChannels))
model = keras_model_sequential()
model  %>%
layer_conv_2d(filters=128,kernel_size=3,activation="relu",input_shape=c(patchSize,patchSize,patchChannels))
model
?layer_max_pooling_2d
model = keras_model_sequential()
model  %>%
layer_conv_2d(filters = 128, kernel_size = 3, activation = "relu", input_shape= c(patchSize,patchSize,patchChannels)) %>%
layer_conv_2d(filters = 128, kernel_size = 3, activation="relu") %>%
layer_max_pooling_2d(filters = 96, kernel_size = 3, activation = "relu")
model = keras_model_sequential()
model  %>%
layer_conv_2d(filters = 128, kernel_size = 3, activation = "relu", input_shape= c(patchSize,patchSize,patchChannels)) %>%
layer_conv_2d(filters = 128, kernel_size = 3, activation="relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
model = keras_model_sequential()
model  %>%
layer_conv_2d(filters = 128, kernel_size = 3, activation = "relu", input_shape= c(patchSize,patchSize,patchChannels)) %>%
layer_conv_2d(filters = 128, kernel_size = 3, activation="relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu")
model
summary(model)
128/2
128/3
128/96
1.33*128
0.33*128
96/128
model = keras_model_sequential()
model  %>%
layer_conv_2d(filters = 128, kernel_size = 3, activation = "relu", input_shape= c(patchSize,patchSize,patchChannels)) %>%
layer_conv_2d(filters = 128, kernel_size = 3, activation="relu") %>%
layer_max_pooling_2d(pool_size = 0.75) %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu")
summary(model)
model = keras_model_sequential()
model  %>%
# layer_conv_2d(filters = 128, kernel_size = 3, activation = "relu", input_shape= c(patchSize,patchSize,patchChannels)) %>%
# layer_conv_2d(filters = 128, kernel_size = 3, activation="relu") %>%
# layer_max_pooling_2d(pool_size = 0.75) %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu")
summary(model)
model
build(model)
model  %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu", input_shape= c(patchSize,patchSize,patchChannels)) %>%
# layer_conv_2d(filters = 128, kernel_size = 3, activation="relu") %>%
# layer_max_pooling_2d(pool_size = 0.75) %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu")
model = keras_model_sequential()
model  %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu", input_shape= c(patchSize,patchSize,patchChannels)) %>%
# layer_conv_2d(filters = 128, kernel_size = 3, activation="relu") %>%
# layer_max_pooling_2d(pool_size = 0.75) %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu")
summary(model)
model = keras_model_sequential()
model  %>%
layer_conv_2d(filters = 140, kernel_size = 3, activation = "relu", input_shape= c(patchSize,patchSize,patchChannels)) %>%
# layer_conv_2d(filters = 128, kernel_size = 3, activation="relu") %>%
# layer_max_pooling_2d(pool_size = 0.75) %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu")
model = keras_model_sequential()
model  %>%
layer_conv_2d(filters = 25, kernel_size = 3, activation = "relu", input_shape= c(patchSize,patchSize,patchChannels)) %>%
# layer_conv_2d(filters = 128, kernel_size = 3, activation="relu") %>%
# layer_max_pooling_2d(pool_size = 0.75) %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 96, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 64, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 32, kernel_size = 3, activation = "relu") %>%
layer_max_pooling_2d(pool_size = 2) %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu") %>%
layer_conv_2d(filters = 16, kernel_size = 3, activation = "relu")
#TPI classification with small scale and large scale TPI
system(paste0(saga$sagaCmd," ta_morphometry 19 ",
" -DEM ",path_morph_run,"SAGA_dem_fill.sgrd",
" -LANDFORMS ",path_morph_run,"SAGA_landforms",
" -RADIUS_A_MIN 0",
" -RADIUS_A_MAX 5",
" -RADIUS_B_MIN 0",
" -RADIUS_B_MAX 20"))
projRootDir = "B:/geomorph"
projFolders = c("data/","env/","run/","las/","results/","las/corrected/","las/ground/",
"las/dtm/")
global = TRUE
path_prefix = "path_morph_"
paths = link2GI::initProj(projRootDir = projRootDir, projFolders = projFolders, global = global, path_prefix = path_prefix )
cores = 6 # specify the number of cores you want to allocate to the calculations on your machine
#provide path to your saga installation, be advised to adapt the index in the rsaga.env function call to your desired saga installation, choose 1 if you dont care
if (length(list.files(path = path_morph_env, pattern = "saga"))==0){
saga = linkSAGA(ver_select = T)
save(saga, file = paste(path_morph_env,"saga.rds",sep=""))
}else{
load(list.files(path = path_morph_env, pattern = "saga", full.names = T))
}
system(paste0(saga$sagaCmd," ta_morphometry 19 ",
" -DEM ",path_morph_run,"SAGA_dem_fill.sgrd",
" -LANDFORMS ",path_morph_run,"SAGA_landforms",
" -RADIUS_A_MIN 0",
" -RADIUS_A_MAX 5",
" -RADIUS_B_MIN 0",
" -RADIUS_B_MAX 20"))
#TPI classification with small scale and large scale TPI
system(paste0(saga$sagaCmd," ta_morphometry 19 ",
" -DEM ",path_morph_run,"SAGA_dem_fill.sgrd",
" -LANDFORMS ",path_morph_run,"SAGA_landforms_6_36",
" -RADIUS_A_MIN 1",
" -RADIUS_A_MAX 6",
" -RADIUS_B_MIN 6",
" -RADIUS_B_MAX 36"))
tpiClasSaga = raster(paste0(path_morph_run,"SAGA_landforms_6_36.sdat"))
writeRaster(tpiClasSaga, filename = paste0(path_morph_results,"SAGA_landforms_6_36.tif"), overwrite = TRUE)
library(raster)
tpiClasSaga = raster(paste0(path_morph_run,"SAGA_landforms_6_36.sdat"))
writeRaster(tpiClasSaga, filename = paste0(path_morph_results,"SAGA_landforms_6_36.tif"), overwrite = TRUE)
library(workflowr)
install.packages("workflowr")
library(workflowr)
wflow_start("B:/polymer/polymeRID/",existing = T,git = F)
wflow_start("B:/polymer/polymeRID/",existing = T,git = T)
getwd()
getwd()
